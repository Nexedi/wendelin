<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="Notebook" module="erp5.portal_type"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Access_contents_information_Permission</string> </key>
            <value>
              <tuple>
                <string>Assignee</string>
                <string>Assignor</string>
                <string>Manager</string>
                <string>Owner</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>_Add_portal_content_Permission</string> </key>
            <value>
              <tuple>
                <string>Assignee</string>
                <string>Assignor</string>
                <string>Manager</string>
                <string>Owner</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>_Change_local_roles_Permission</string> </key>
            <value>
              <tuple>
                <string>Assignor</string>
                <string>Manager</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>_Modify_portal_content_Permission</string> </key>
            <value>
              <tuple>
                <string>Assignee</string>
                <string>Assignor</string>
                <string>Manager</string>
                <string>Owner</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>_View_Permission</string> </key>
            <value>
              <tuple>
                <string>Assignee</string>
                <string>Assignor</string>
                <string>Manager</string>
                <string>Owner</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>content_md5</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>description</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>drone_data_graph</string> </value>
        </item>
        <item>
            <key> <string>language</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>short_title</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>text_content</string> </key>
            <value> <string encoding="cdata"><![CDATA[

%% md\n
# Drone Simulation Results (best current simulation)\n
<div class="plot_div" id="plot_div"/>\n
\n
\n
%% fetch\n
js: jio.js\n
js: ndarray_bundle.js\n
js: wendelin.js\n
js: https://cdn.plot.ly/plotly-latest.min.js\n
\n
%% js\n
hateoas_url = "https://softinst216244.host.vifib.net/erp5/web_site_module/renderjs_runner/hateoas/";\n
jio = jIO.createJIO({\n
  type: "erp5",\n
  url: hateoas_url,\n
  default_view_reference: "view"\n
});\n
\n
gadget = {\n
  getSetting: function(property) {\n
    return new RSVP.Queue()\n
      .push(function () {\n
        if (property == "hateoas_url") {\n
          return hateoas_url;\n
        }\n
        return;\n
      });\n
  },\n
  jio_getAttachment: function(id, url, parameter_dict) {\n
    return jio.getAttachment(id, url, parameter_dict);\n
  },\n
  jio_get: function(id) {return jio.get(id);}\n
}\n
\n
\n
var graph = document.getElementById(\'plot_div\'),\n
graph_data = [],\n
label_list = ["ASML",\t"climb_rate",\t"distance",\t"ground_speed",\t"time"]; \n
\n
\n
\n
\n
function unpack(rows, key) {\n
return rows.map(function(row) { return row[key]; });\n
}\n
\n
// TODO we still need to manually type in the index range for the iteration we are interested in, because for some reason the data array lines are not ploted\n
function getData(){\n
var graph_data=[],\n
ratio = screen.availWidth / 1024,\n
interval,\n
frequency,\n
start_index = 0,\n
stop_index = 239,\n
array_id;\n
\n
\n
return jio.allDocs({\n
query: \'portal_type:"Data Array" AND \' +\n
\'title: "Create Score List Array"\'\n
})\n
.push(function (result) {\n
array_id = result.data.rows[0].id;\n
console.log(array_id);\n
return wendelin.getArrayRawSlice(gadget, array_id, start_index, stop_index);\n
})\n
.push(function(result) {\n
for (i = 0; i < label_list.length; i += 1) {\n
graph_data = graph_data.concat(nj.unpack(result.pick( null, label_list[i])));\n
}\n
\n
return graph_data\n
})\n
.push(function (graph_data) {\n
var trace1 = {\n
        type: "scattergl",\n
        mode: "markers",\n
        name: "distance",\n
        x: unpack(graph_data, label_list.indexOf("time")),\n
        y: unpack(graph_data, label_list.indexOf("distance")),\n
        line: {color: \'#1f77b4\'}\n
        };\n
        \n
var trace2 = {\n
        type: "scattergl",\n
        mode: "markers",\n
        name: \'ASML\',\n
        x: unpack(graph_data, label_list.indexOf("time")),\n
        y: unpack(graph_data, label_list.indexOf("ASML")),\n
        line: {color: \'#ff7f0e\'}\n
        }\n
        \n
var data = [trace1, trace2];\n
return data\n
});\n
}\n
\n
\n
function plot () {\n
return getData()\n
.push(function (data) {\n
Plotly.newPlot(\n
graph,\n
data,\n
    { \'title\' :\'Distance and ASML over time\'\n
    });\n
    graph.on(\'plotly_relayout\', function(eventdata) {\n
      var start_date = new Date(eventdata["xaxis.range[0]"]),\n
      stop_date = new Date(eventdata["xaxis.range[1]"]);\n
      return update_graph(start_date, stop_date);\n
    });\n
  });\n
}\n
\n
\n
plot();\n
\n
%% md\n
<div class="plot_div2" id="plot_div2"/>\n
\n
\n
%% js\n
\n
var graph = document.getElementById(\'plot_div2\');\n
function getData(){\n
var graph_data=[],\n
ratio = screen.availWidth / 1024,\n
interval,\n
frequency,\n
start_index = 0,\n
stop_index = 239,\n
array_id;\n
\n
return jio.allDocs({\n
query: \'portal_type:"Data Array" AND \' +\n
\'title: "Create Score List Array"\'\n
})\n
.push(function (result) {\n
array_id = result.data.rows[0].id;\n
// Problem is, that currently both the array with the score data and the array with the plot data have the same name. So we might need to hardcode the array ID\n
return wendelin.getArrayRawSlice(gadget, array_id, 0, 1);\n
})\n
.push(function (result) {\n
\n
return wendelin.getArrayRawSlice(gadget, array_id, start_index, stop_index);\n
})\n
.push(function(result) {\n
for (i = 0; i < label_list.length; i += 1) {\n
graph_data = graph_data.concat(nj.unpack(result.pick( null, label_list[i])));\n
}\n
return graph_data\n
})\n
.push(function (graph_data) {\n
\n
var trace1 = {\n
        type: "scatter",\n
        mode: "markers",\n
        name: "ground speed",\n
        x: unpack(graph_data, label_list.indexOf("time")),\n
        y: unpack(graph_data, label_list.indexOf("ground_speed")),\n
        line: {color: \'#1f77b4\'}\n
        };\n
        \n
var trace2 = {\n
        type: "scatter",\n
        mode: "markers",\n
        name: \'climb rate\',\n
        x: unpack(graph_data, label_list.indexOf("time")),\n
        y: unpack(graph_data, label_list.indexOf("climb_rate")),\n
        line: {color: \'#ff7f0e\'}\n
        }\n
        \n
var data = [trace1, trace2];\n
return data\n
});\n
}\n
\n
\n
\n
function plot () {\n
return getData()\n
.push(function (data) {\n
Plotly.newPlot(\n
graph,\n
data,\n
    { \'title\' :\'Ground speed and climb rate over time\'\n
    });\n
    graph.on(\'plotly_relayout\', function(eventdata) {\n
      var start_date = new Date(eventdata["xaxis.range[0]"]),\n
      stop_date = new Date(eventdata["xaxis.range[1]"]);\n
      return update_graph(start_date, stop_date);\n
    });\n
  });\n
}\n
\n
\n
plot();

]]></string> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>DroneSim</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
